[
    $result: [
        $element: {
            $expression := [1, 2, 3][2]
            $expression := [1, 2, 3].reverse()
            $expression := products[
                $yoyo
                "Duncan"
            ].calculateUPC()
            $expression := products.sort()
        }
        $function: {
            $expression := random(count)[1]
            $expression := random($count: 16).sort(increasing)
            $expression := random(16).sort(
                numeric
                increasing
            )
            $expression := random(16).sort()[-x]
        }
        $grouping: {
            $expression := ([1, 2] + [2, 3])[1]
            $expression := ([1, 2] + [2, 3]).reverse()
            $expression := ([1, 2] + [2, 3]).reverse(foo, bar)[2]
        }
    ]
    $dereference: {
        $expression := @result
    }
    $factorial: {
        $expression := dereference!
    }
    $exponential: {
        $expression := percent ^ power
    }
    $inversion: [
        $negative: {
            $expression := -exponential
            $expression := - -pi
        }
        $inverse: {
            $expression := /exponential
        }
        $conjugate: {
            $expression := *exponential
        }
    ]
    $geometric: [
        $product: {
            $expression := -inversion * scaler
        }
        $quotient: {
            $expression := inversion / dividend
        }
        $remainder: {
            $expression := inversion // dividend
        }
    ]
    $arithmetic: [
        $sum: {
            $expression := geometric + addend
        }
        $difference: {
            $expression := geometric - subtractend
        }
    ]
    $magnitude: {
        $expression := |arithmetic|
    }
    $comparison: [
        $less: {
            $expression := magnitude < scaler
        }
        $equal: {
            $expression := magnitude = scaler
        }
        $greater: {
            $expression := magnitude > scaler
        }
        $is: {
            $expression := magnitude is value
        }
        $matches: {
            $expression := magnitude matches pattern
        }
    ]
    $complement: {
        $expression := not comparison
    }
    $logical: [
        $and: {
            $expression := complement and [1, 2, 3]
        }
        $sans: {
            $expression := complement sans [$a: "a", $b: "b", $c: "c"]
        }
        $or: {
            $expression := complement or value
        }
        $xor: {
            $expression := complement xor value
        }
    ]
    $default: {
        $expression := logical ? default
    }
]
<bali:CT41AC8K5AZBMJF88W60F40SZQCMA0XNv1.3> '
    p+MCxk21YeGOs9v+N6loxH4xxp36HBhP6+6KXiNwmC+tNQKAY4bkzmeExImIsB3ZTTDAw6g9c8slT1Zt
    5YwErkyPdSBBzIlWg6NAEcpDVB/05mqBEa5rRSm6hIG05LleW3DUZ0nimfmqQ3lAC/OXoryNo9Fg256k
    +fqGZejyvQlyBgtiQwbuSI/E5SuBBHZMuL+kPRiRYwipcHe9oa8fLmyKr6+s4/NZBR88h5TWMiQcmFX3
    oVeSayBkzOv/k45bmIDqDH9w5DxjJbC2F6xrx7Nd30ti+v6fV1bEBt5b3Pzd00ptwBRDP9aenDJ3Y0rV
    ZgvEUwlEHcHs7ZWzMhawG7H8SsIyMm0MT4brkn9kSoVyCbjKTCPedlbmDjR2MikZbwnk82wYFduWV2k=
'
