
1.EvaluateExpression:
LOAD LITERAL `2`
INVOKE INTRINSIC table WITH ARGUMENT
LOAD LITERAL `$foo`
LOAD VARIABLE $bar
INVOKE INTRINSIC setValue WITH 3 ARGUMENTS
LOAD LITERAL `$baz`
LOAD LITERAL `5`
INVOKE INTRINSIC setValue WITH 3 ARGUMENTS
STORE VARIABLE $result

2.EvaluateExpression:
LOAD VARIABLE $variable
STORE VARIABLE $result

3.EvaluateExpression:
LOAD LITERAL `1`
INVOKE INTRINSIC array WITH ARGUMENT
LOAD LITERAL `13`
INVOKE INTRINSIC addItem WITH 2 ARGUMENTS
EXECUTE METHOD isPrime WITH ARGUMENT
STORE VARIABLE $result

4.EvaluateExpression:
LOAD VARIABLE $a
LOAD VARIABLE $b
INVOKE INTRINSIC sum WITH 2 ARGUMENTS
LOAD VARIABLE $c
INVOKE INTRINSIC product WITH 2 ARGUMENTS
STORE VARIABLE $result

5.EvaluateExpression:
LOAD VARIABLE $reference
INVOKE INTRINSIC dereference WITH ARGUMENT
STORE VARIABLE $result

6.EvaluateExpression:
LOAD VARIABLE $customer
LOAD LITERAL `$order`
INVOKE INTRINSIC getValue WITH 2 ARGUMENTS
LOAD LITERAL `$item`
INVOKE INTRINSIC getValue WITH 2 ARGUMENTS
LOAD LITERAL `5`
INVOKE INTRINSIC getValue WITH 2 ARGUMENTS
STORE VARIABLE $result

7.EvaluateExpression:
LOAD VARIABLE $list
LOAD LITERAL `1`
INVOKE INTRINSIC array WITH ARGUMENT
LOAD VARIABLE $item
INVOKE INTRINSIC addItem WITH 2 ARGUMENTS
EXECUTE METHOD addItem WITH 2 ARGUMENTS
STORE VARIABLE $result

8.EvaluateExpression:
LOAD LITERAL `23`
INVOKE INTRINSIC factorial WITH ARGUMENT
STORE VARIABLE $result

9.EvaluateExpression:
LOAD LITERAL `2`
LOAD LITERAL `8`
INVOKE INTRINSIC exponential WITH 2 ARGUMENTS
STORE VARIABLE $result

10.EvaluateExpression:
LOAD LITERAL `pi`
INVOKE INTRINSIC negative WITH ARGUMENT
STORE VARIABLE $result

11.EvaluateExpression:
LOAD LITERAL `5`
INVOKE INTRINSIC inverse WITH ARGUMENT
STORE VARIABLE $result

12.EvaluateExpression:
LOAD LITERAL `(3, 4i)`
INVOKE INTRINSIC conjugate WITH ARGUMENT
STORE VARIABLE $result

13.EvaluateExpression:
LOAD VARIABLE $x
LOAD VARIABLE $y
INVOKE INTRINSIC product WITH 2 ARGUMENTS
STORE VARIABLE $result

14.EvaluateExpression:
LOAD VARIABLE $a
LOAD VARIABLE $b
INVOKE INTRINSIC quotient WITH 2 ARGUMENTS
STORE VARIABLE $result

15.EvaluateExpression:
LOAD VARIABLE $c
LOAD VARIABLE $d
INVOKE INTRINSIC remainder WITH 2 ARGUMENTS
STORE VARIABLE $result

16.EvaluateExpression:
LOAD VARIABLE $x
LOAD VARIABLE $y
INVOKE INTRINSIC sum WITH 2 ARGUMENTS
STORE VARIABLE $result

17.EvaluateExpression:
LOAD VARIABLE $w
LOAD VARIABLE $z
INVOKE INTRINSIC difference WITH 2 ARGUMENTS
STORE VARIABLE $result

18.EvaluateExpression:
LOAD LITERAL `(3, 4i)`
INVOKE INTRINSIC magnitude WITH ARGUMENT
STORE VARIABLE $result

19.EvaluateExpression:
LOAD VARIABLE $a
LOAD VARIABLE $b
INVOKE INTRINSIC less WITH 2 ARGUMENTS
STORE VARIABLE $result

20.EvaluateExpression:
LOAD VARIABLE $c
LOAD VARIABLE $d
INVOKE INTRINSIC equal WITH 2 ARGUMENTS
STORE VARIABLE $result

21.EvaluateExpression:
LOAD VARIABLE $f
LOAD VARIABLE $g
INVOKE INTRINSIC more WITH 2 ARGUMENTS
STORE VARIABLE $result

22.EvaluateExpression:
LOAD VARIABLE $h
LOAD VARIABLE $j
INVOKE INTRINSIC is WITH 2 ARGUMENTS
STORE VARIABLE $result

23.EvaluateExpression:
LOAD VARIABLE $k
LOAD VARIABLE $m
INVOKE INTRINSIC matches WITH 2 ARGUMENTS
STORE VARIABLE $result

24.EvaluateExpression:
LOAD VARIABLE $p
INVOKE INTRINSIC complement WITH ARGUMENT
STORE VARIABLE $result

25.EvaluateExpression:
LOAD VARIABLE $a
LOAD VARIABLE $b
INVOKE INTRINSIC and WITH 2 ARGUMENTS
STORE VARIABLE $result

26.EvaluateExpression:
LOAD VARIABLE $c
LOAD VARIABLE $d
INVOKE INTRINSIC sans WITH 2 ARGUMENTS
STORE VARIABLE $result

27.EvaluateExpression:
LOAD VARIABLE $f
LOAD VARIABLE $g
INVOKE INTRINSIC xor WITH 2 ARGUMENTS
STORE VARIABLE $result

28.EvaluateExpression:
LOAD VARIABLE $h
LOAD VARIABLE $j
INVOKE INTRINSIC or WITH 2 ARGUMENTS
STORE VARIABLE $result

29.EvaluateExpression:
LOAD VARIABLE $foo
LOAD LITERAL `5`
INVOKE INTRINSIC default WITH 2 ARGUMENTS
STORE VARIABLE $result

