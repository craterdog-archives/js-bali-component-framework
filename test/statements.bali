[
    $block: [
        $simple: {}
        $simple: { }
        $empty: {
        }
        $single: {
            $x := value
        }
    ]
    $statement: {
        label: while condition do {
            break from label
        } catch $exception matching [$type: "BadException"] with {
            continue to label
        }
        queue message() for component finish with {
            wait for $event matching template
        }
        if false then {
            $component := 0
        } else if component < 5 then {
            $component := 1.2
        } else {
            $component := - -pi i
        } catch $exception matching template with {
            publish exception
            throw exception
        } finish with {
            $done := true
        }
    }
    $assignValue: {
        $component := value
        variable[1] ?= default
        $component += add
        variable[-1] -= subtract
        $component *= times
        variable[$index] /= divide
        $component //= modulo
        variable[<2017-04-01>] ^= exponential
        $component a= land
        $component s= lsans
        $component o= lor
        $component x= lxor
    }
    $continueLoop: {
        continue
        continue to label
    }
    $breakLoop: {
        break
        break from label
    }
    $publishEvent: {
        publish event
    }
    $waitForEvent: {
        wait for $event matching changeEvent
    }
    $queueMessage: {
        queue message() for <bali:/#N0N3>
        queue message(1) for <bali:/#N0N3>
        queue message($first: 1, $second: second, $third: "3rd") for <bali:/#N0N3>
    }
    $returnResult: {
        return
        return result
    }
    $throwException: {
        throw exception
    }
    $ifThen: [
        $simple: {
            if condition then {
            }
        }
        $withElse: {
            if condition then {
            } else {
            }
        }
        $compound: {
            if condition then {
            } else if otherCondition then {
            }
        }
        $nested: {
            if condition then {
            } else if otherCondition then {
            } else {
            }
        }
    ]
    $selectFrom: [
        $simple: {
            select expression from a do {
            } b do {
            } c do {
            }
        }
        $withElse: {
            select expression from a do {
            } b do {
            } c do {
            } else {
            }
        }
    ]
    $whileLoop: [
        $simple: {
            while condition do {
            }
        }
        $withLabel: {
            label: while condition do {
            }
        }
    ]
    $withLoop: [
        $simple: {
            with 1..10 do {
            }
        }
        $withLabel: {
            label: with 1..10 do {
            }
        }
        $withEach: {
            with each $item in list do {
            }
        }
        $withLabelAndEach: {
            label: with each $item in list do {
            }
        }
    ]
]
