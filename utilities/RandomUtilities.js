/************************************************************************
 * Copyright (c) Crater Dog Technologies(TM).  All Rights Reserved.     *
 ************************************************************************
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.        *
 *                                                                      *
 * This code is free software; you can redistribute it and/or modify it *
 * under the terms of The MIT License (MIT), as published by the Open   *
 * Source Initiative. (See http://opensource.org/licenses/MIT)          *
 ************************************************************************/
'use strict';
var crypto = require('crypto');
var codex = require('./EncodingUtilities');


/**
 * This function returns a binary string of the specified size containing
 * randomly generated bytes.
 *
 * @param {Number} numberOfBytes The number of bytes in the desired binary string.
 * @return {Buffer} The data buffer containing random bytes.
 */
exports.generateBytes = function(numberOfBytes) {
    var buffer = crypto.randomBytes(numberOfBytes);
    return buffer;
};


/**
 * This function returns a random integer in the range [-2,147,483,648..2,147,483,647].
 *
 * @return {Number} The random integer.
 */
exports.generateInteger = function() {
    var integer = codex.bytesToInteger(exports.generateBytes(4));
    return integer;
};


/**
 * This function returns a random index in the range in the range [0..length).
 *
 * @param {Number} length The length of the collection being indexed.
 * @return {Number} The random index.
 */
exports.generateIndex = function(length) {
    var randomInteger = exports.generateInteger() & 0x7FFFFFFF;  // in range [0..2,147,483,647]
    var index = randomInteger % length;
    return index;
};


/**
 * This function returns a random tag.
 *
 * @return {String} The random tag.
 */
exports.generateTag = function() {
    var bytes = exports.generateBytes(20);
    var tag = '#' + codex.base32Encode(bytes);
    return tag;
};


/**
 * This function returns the result of a weighted coin toss. A probability of
 * zero will always return false and a probability of one will always return true.
 *
 * @param {Number} probability The probability that the toss will return true [0.0..1.0].
 * @return {Boolean} The result of the coin toss.
 */
exports.coinToss = function(probability) {
    var randomInteger = exports.generateInteger() & 0x7FFFFFFF;  // in range [0..2,147,483,647]
    var toss = randomInteger / 2147483648;  // convert to range [0.0..1.0)
    return toss < probability;  // true: [0.0..probability) and false: [probability..1.0]
};
