/************************************************************************
 * Copyright (c) Crater Dog Technologies(TM).  All Rights Reserved.     *
 ************************************************************************
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.        *
 *                                                                      *
 * This code is free software; you can redistribute it and/or modify it *
 * under the terms of The MIT License (MIT), as published by the Open   *
 * Source Initiative. (See http://opensource.org/licenses/MIT)          *
 ************************************************************************/
'use strict';

var codex = require('./EncodingUtilities');
var forge = require('node-forge');
forge.options.usePureJavaScript = true;
var random = require('node-forge').random;
var hash = require('node-forge').md;


/**
 * This utility method returns the result of a weighted coin toss. A probability of
 * zero will always return false and a probability of one will always return true.
 *
 * @param probability The probability that the toss will return true [0.0..1.0].
 * @return The result of the coin toss.
 */
exports.coinToss = function(probability) {
    var randomInteger = exports.generateRandomInteger() & 0x7FFFFFFF;  // in range [0..2,147,483,647]
    var toss = randomInteger / 2147483648;  // convert to range [0.0..1.0)
    return toss < probability;  // true: [0.0..probability) and false: [probability..1.0]
};


/**
 * This utility method returns a byte array of the specified size containing randomly generated bytes.
 *
 * @param numberOfBytes The number of bytes in the desired byte array.
 * @return The byte array containing random bytes.
 */
exports.generateRandomBytes = function(numberOfBytes) {
    var bytes = random.generateSync(numberOfBytes);
    return bytes;
};


/**
 * This utility method returns a random integer in the range in the
 * range [-2,147,483,648..2,147,483,647].
 *
 * @return The random integer.
 */
exports.generateRandomInteger = function() {
    var integer = codex.bytesToInteger(random.generateSync(4));
    return integer;
};


exports.sha512Hash = function(string) {
    var sha512 = hash.sha512.create();
    sha512.update(string);
    var hashString = codex.base32Encode(sha512.digest().getBytes());
    return hashString;
};
