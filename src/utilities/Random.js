/************************************************************************
 * Copyright (c) Crater Dog Technologies(TM).  All Rights Reserved.     *
 ************************************************************************
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.        *
 *                                                                      *
 * This code is free software; you can redistribute it and/or modify it *
 * under the terms of The MIT License (MIT), as published by the Open   *
 * Source Initiative. (See http://opensource.org/licenses/MIT)          *
 ************************************************************************/
'use strict';

/**
 * This library provides functions that generate random values. It uses a cryptographically
 * secure random number generator.
 */
const crypto = require('crypto');
const Codex = require('./Codex').Codex;


// PRIVATE CONSTANTS

const MAXIMUM_INTEGER = 4294967296;  // unsigned


// PUBLIC FUNCTIONS

/**
 * This function returns a binary string of the specified size containing
 * randomly generated bytes.
 *
 * @param {Number} numberOfBytes The number of bytes in the desired binary string.
 * @return {Buffer} A data buffer containing random bytes.
 */
exports.bytes = function(numberOfBytes) {
    const buffer = crypto.randomBytes(numberOfBytes);
    return buffer;
};


/**
 * This function returns a random integer in the range [-2,147,483,648..2,147,483,647].
 *
 * @return {Number} The random integer.
 */
exports.integer = function() {
    const codex = new Codex();
    const integer = codex.bytesToInteger(exports.bytes(4));
    return integer;
};


/**
 * This function returns a random index in the range in the range [1..length].
 *
 * @param {Number} length The length of the collection being indexed.
 * @return {Number} The random ordinal index.
 */
exports.index = function(length) {
    const randomInteger = (exports.integer() + MAXIMUM_INTEGER) % MAXIMUM_INTEGER;  // in range [0..MAX]
    const index = (randomInteger % length) + 1;  // in range [1..length] for ordinal based indexing
    return index;
};


/**
 * This function returns a random probability in the range in the range [0..1].
 *
 * @return {Number} The random probability.
 */
exports.probability = function() {
    const randomInteger = (exports.integer() + MAXIMUM_INTEGER) % MAXIMUM_INTEGER;  // in range [0..MAX]
    const probability = randomInteger / MAXIMUM_INTEGER;  // in range [0..1]
    return probability;
};


/**
 * This function returns the result of a weighted coin toss. A probability of
 * zero will always return false and a probability of one will always return true.
 *
 * @param {Number} weight The probability that the toss will return true [0.0..1.0].
 * @return {Boolean} The result of the coin toss.
 */
exports.coinToss = function(weight) {
    const randomInteger = (exports.integer() + MAXIMUM_INTEGER) % MAXIMUM_INTEGER;  // in range [0..MAX]
    const toss = randomInteger / (MAXIMUM_INTEGER - 1);  // convert to range [0.0..1.0)
    return toss < weight;  // true: [0.0..probability) and false: [probability..1.0]
};
